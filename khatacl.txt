<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pakistani Khata System</title>
    <style>
        :root {
            --primary-color: #006400;
            --secondary-color: #8b4513;
            --accent-color: #daa520;
            --danger-color: #b22222;
            --paper-color: #fff9e6;
            --paper-lines: #e0d8c0;
            --ink-color: #2b2b2b;
        }
        
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background-color: #f5f5f5;
            color: var(--ink-color);
            line-height: 1.6;
            background-image: url("data:image/svg+xml,%3Csvg width='100' height='100' viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M11 18c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm48 25c3.866 0 7-3.134 7-7s-3.134-7-7-7-7 3.134-7 7 3.134 7 7 7zm-43-7c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm63 31c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM34 90c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zm56-76c1.657 0 3-1.343 3-3s-1.343-3-3-3-3 1.343-3 3 1.343 3 3 3zM12 86c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm28-65c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm23-11c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-6 60c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm29 22c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zM32 63c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm57-13c2.76 0 5-2.24 5-5s-2.24-5-5-5-5 2.24-5 5 2.24 5 5 5zm-9-21c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM60 91c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM35 41c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2zM12 60c1.105 0 2-.895 2-2s-.895-2-2-2-2 .895-2 2 .895 2 2 2z' fill='%23daa520' fill-opacity='0.1' fill-rule='evenodd'/%3E%3C/svg%3E");
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1rem;
        }
        
        header {
            background-color: var(--primary-color);
            color: white;
            padding: 1rem;
            border-radius: 5px 5px 0 0;
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 1rem;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        
        h1, h2, h3 {
            font-family: 'Jameel Noori Nastaleeq', 'Noto Nastaliq Urdu', serif;
        }
        
        .urdu {
            font-family: 'Jameel Noori Nastaleeq', 'Noto Nastaliq Urdu', serif;
            direction: rtl;
        }
        
        .paper {
            background-color: var(--paper-color);
            padding: 1.5rem;
            border-radius: 5px;
            box-shadow: 0 0 15px rgba(0,0,0,0.1);
            margin-bottom: 2rem;
            position: relative;
            background-image: linear-gradient(var(--paper-lines) 1px, transparent 1px);
            background-size: 100% 2rem;
            border: 1px solid #d3b17d;
        }
        
        .paper::before {
            content: "";
            position: absolute;
            left: 3rem;
            top: 0;
            bottom: 0;
            width: 1px;
            background-color: #c0392b;
            opacity: 0.5;
        }
        
        .tab-container {
            display: flex;
            margin-bottom: 1rem;
            border-bottom: 2px solid var(--primary-color);
        }
        
        .tab {
            padding: 0.75rem 1.5rem;
            cursor: pointer;
            background-color: #f5f5f5;
            border: 1px solid #ddd;
            border-bottom: none;
            border-radius: 5px 5px 0 0;
            margin-right: 0.5rem;
            transition: all 0.3s ease;
        }
        
        .tab.active {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-color);
        }
        
        .tab-content {
            display: none;
            padding: 1rem;
        }
        
        .tab-content.active {
            display: block;
        }
        
        .form-group {
            margin-bottom: 1rem;
        }
        
        label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: bold;
            color: var(--secondary-color);
        }
        
        input, select, textarea {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            background-color: var(--paper-color);
            font-family: 'Kalam', cursive;
            font-size: 1rem;
            transition: all 0.3s ease;
        }
        
        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 2px rgba(218, 165, 32, 0.2);
        }
        
        button {
            padding: 0.75rem 1.5rem;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-weight: bold;
            margin-right: 0.5rem;
            margin-bottom: 0.5rem;
        }
        
        button:hover {
            background-color: #004d00;
        }
        
        button.secondary {
            background-color: var(--secondary-color);
        }
        
        button.secondary:hover {
            background-color: #5e2c0b;
        }
        
        button.danger {
            background-color: var(--danger-color);
        }
        
        button.danger:hover {
            background-color: #8b0000;
        }
        
        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 1rem;
            background-color: var(--paper-color);
        }
        
        th, td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid var(--paper-lines);
        }
        
        th {
            background-color: var(--secondary-color);
            color: white;
        }
        
        tr:nth-child(even) {
            background-color: rgba(0,0,0,0.02);
        }
        
        tr:hover {
            background-color: rgba(218, 165, 32, 0.1);
        }
        
        .action-btn {
            padding: 0.5rem;
            border: none;
            background: none;
            cursor: pointer;
            color: var(--primary-color);
            transition: all 0.3s ease;
        }
        
        .action-btn:hover {
            color: var(--accent-color);
        }
        
        .balance {
            font-weight: bold;
            font-size: 1.2rem;
            margin-bottom: 1rem;
            padding: 0.5rem;
            border-radius: 4px;
        }
        
        .balance.positive {
            color: green;
            background-color: rgba(0, 128, 0, 0.1);
        }
        
        .balance.negative {
            color: red;
            background-color: rgba(255, 0, 0, 0.1);
        }
        
        .search-container {
            margin-bottom: 1rem;
            display: flex;
            gap: 0.5rem;
        }
        
        .search-container input {
            flex: 1;
        }
        
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
            overflow: auto;
        }
        
        .modal-content {
            background-color: var(--paper-color);
            margin: 10% auto;
            padding: 2rem;
            border-radius: 5px;
            max-width: 600px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
            position: relative;
        }
        
        .close {
            position: absolute;
            top: 1rem;
            right: 1rem;
            font-size: 1.5rem;
            cursor: pointer;
        }
        
        .detail-view {
            background-color: var(--paper-color);
            padding: 1rem;
            border-radius: 5px;
            margin-bottom: 1rem;
        }
        
        .customer-details {
            padding: 1rem;
            margin-bottom: 1rem;
            border-radius: 5px;
            background-color: rgba(218, 165, 32, 0.1);
        }
        
        .print-section {
            display: none;
        }
        
        @media print {
            .no-print {
                display: none !important;
            }
            
            .print-section {
                display: block;
            }
            
            body {
                background: white;
                background-image: none;
            }
            
            .paper {
                box-shadow: none;
                border: none;
            }
        }
        
        /* Mobile responsiveness */
        @media (max-width: 768px) {
            .tab-container {
                flex-wrap: wrap;
            }
            
            .tab {
                margin-bottom: 0.5rem;
                font-size: 0.9rem;
                padding: 0.5rem 1rem;
            }
            
            th, td {
                padding: 0.5rem;
                font-size: 0.9rem;
            }
            
            .hide-mobile {
                display: none;
            }
            
            .modal-content {
                width: 95%;
                margin: 5% auto;
            }
        }
        
        /* For handwritten style inputs */
        @font-face {
            font-family: 'Kalam';
            src: url('https://cdnjs.cloudflare.com/ajax/libs/Kalam/2.0/Kalam-Regular.woff2') format('woff2');
            font-weight: normal;
            font-style: normal;
        }
        
        .handwritten {
            font-family: 'Kalam', cursive;
        }
        
        .logo {
            display: flex;
            align-items: center;
            gap: 1rem;
        }
        
        .logo img {
            width: 50px;
            height: 50px;
        }
        
        .date-filters {
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
            flex-wrap: wrap;
        }
        
        .date-filters label {
            display: flex;
            align-items: center;
            margin-bottom: 0;
            white-space: nowrap;
        }
        
        .date-filters input {
            width: auto;
            margin-left: 0.5rem;
        }
        
        .filter-btn {
            padding: 0.5rem 1rem;
            margin-left: auto;
        }
        
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 200px;
        }
        
        .loading::after {
            content: "";
            width: 50px;
            height: 50px;
            border: 5px solid #ddd;
            border-top-color: var(--primary-color);
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .stamp {
            position: relative;
            display: inline-block;
            padding: 0.5rem 1rem;
            transform: rotate(-5deg);
            font-weight: bold;
            color: red;
            border: 2px solid red;
            border-radius: 8px;
            font-size: 1.2rem;
            text-transform: uppercase;
            margin-left: 1rem;
        }
        
        .customers-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 1rem;
            margin-top: 1rem;
        }
        
        .customer-card {
            background-color: white;
            border-radius: 5px;
            padding: 1rem;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
        }
        
        .customer-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }
        
        .customer-card .balance-indicator {
            position: absolute;
            top: 1rem;
            right: 1rem;
            width: 15px;
            height: 15px;
            border-radius: 50%;
        }
        
        .balance-indicator.positive {
            background-color: green;
        }
        
        .balance-indicator.negative {
            background-color: red;
        }
        
        .balance-indicator.zero {
            background-color: #daa520;
        }
        
        .chart-container {
            height: 300px;
            margin-bottom: 2rem;
        }
        
        .pagination {
            display: flex;
            justify-content: center;
            gap: 0.5rem;
            margin-top: 1rem;
            flex-wrap: wrap;
        }
        
        .pagination button {
            padding: 0.5rem 1rem;
        }
        
        .lang-toggle {
            padding: 0.5rem 1rem;
            background-color: var(--accent-color);
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
        }
        
        .toolbar {
            display: flex;
            justify-content: space-between;
            margin-bottom: 1rem;
            flex-wrap: wrap;
            gap: 0.5rem;
        }
        
        .summary-box {
            background-color: white;
            border-radius: 5px;
            padding: 1rem;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            margin-bottom: 1rem;
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
        }
        
        .summary-value {
            font-size: 2rem;
            font-weight: bold;
            margin: 0.5rem 0;
        }
        
        .summary-label {
            color: #666;
            font-size: 0.9rem;
        }
        
        .summary-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 1rem;
            margin-bottom: 2rem;
        }
        
        .backup-restore {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
            flex-wrap: wrap;
        }
        
        .drop-area {
            border: 2px dashed #ddd;
            border-radius: 5px;
            padding: 2rem;
            text-align: center;
            margin-top: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .drop-area:hover {
            border-color: var(--accent-color);
            background-color: rgba(218, 165, 32, 0.1);
        }
        
        .dropdown {
            position: relative;
            display: inline-block;
        }
        
        .dropdown-content {
            display: none;
            position: absolute;
            background-color: white;
            min-width: 160px;
            box-shadow: 0 8px 16px rgba(0,0,0,0.2);
            z-index: 1;
            border-radius: 5px;
        }
        
        .dropdown-content a {
            color: black;
            padding: 12px 16px;
            text-decoration: none;
            display: block;
        }
        
        .dropdown-content a:hover {
            background-color: #f1f1f1;
        }
        
        .dropdown:hover .dropdown-content {
            display: block;
        }
        
        /* Reminder template styles */
        .reminder-template {
            background-color: white;
            border-radius: 5px;
            padding: 1rem;
            margin-top: 1rem;
            border: 1px solid #ddd;
        }
        
        .reminder-preview {
            border: 1px solid #ddd;
            padding: 1rem;
            border-radius: 5px;
            margin-top: 1rem;
            background-color: #f9fbf9;
        }
        
        /* Toggle Switch */
        .switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }
        
        .switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 34px;
        }
        
        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        
        input:checked + .slider {
            background-color: var(--primary-color);
        }
        
        input:focus + .slider {
            box-shadow: 0 0 1px var(--primary-color);
        }
        
        input:checked + .slider:before {
            transform: translateX(26px);
        }
        
        .language-toggle {
            display: flex;
            align-items: center;
            gap: 0.5rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <div class="logo">
                <h1>Pakistani Khata System</h1>
                <span class="urdu" id="urduTitle" style="display: none;">پاکستانی کھاتہ سسٹم</span>
            </div>
            <div class="language-toggle">
                <span id="langLabel">Urdu</span>
                <label class="switch">
                    <input type="checkbox" id="languageToggle">
                    <span class="slider"></span>
                </label>
            </div>
        </header>
        
        <div class="tab-container no-print">
            <div class="tab active" data-tab="dashboard">Dashboard</div>
            <div class="tab" data-tab="customers">Customers</div>
            <div class="tab" data-tab="transactions">Transactions</div>
            <div class="tab" data-tab="reports">Reports</div>
            <div class="tab" data-tab="settings">Settings</div>
        </div>
        
        <!-- Dashboard Tab -->
        <div class="tab-content active" id="dashboard">
            <div class="paper">
                <h2>Khata Dashboard</h2>
                <h3 class="urdu" style="display: none;">ڈیش بورڈ</h3>
                
                <div class="summary-grid">
                    <div class="summary-box">
                        <div class="summary-value" id="totalCustomers">0</div>
                        <div class="summary-label">Total Customers</div>
                    </div>
                    <div class="summary-box">
                        <div class="summary-value" id="totalDue">Rs. 0</div>
                        <div class="summary-label">Total Due</div>
                    </div>
                    <div class="summary-box">
                        <div class="summary-value" id="totalPaid">Rs. 0</div>
                        <div class="summary-label">Total Paid</div>
                    </div>
                    <div class="summary-box">
                        <div class="summary-value" id="currentBalance">Rs. 0</div>
                        <div class="summary-label">Current Balance</div>
                    </div>
                </div>
                
                <h3>Recent Transactions</h3>
                <div class="table-container">
                    <table id="recentTransactions">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Customer</th>
                                <th>Type</th>
                                <th>Amount</th>
                                <th>Balance</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
                
                <h3>Top Customers</h3>
                <div class="table-container">
                    <table id="topCustomers">
                        <thead>
                            <tr>
                                <th>Customer</th>
                                <th>Total Business</th>
                                <th>Current Balance</th>
                                <th>Last Transaction</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
            </div>
        </div>
        
        <!-- Customers Tab -->
        <div class="tab-content" id="customers">
            <div class="paper">
                <div class="toolbar">
                    <div class="search-container">
                        <input type="text" id="customerSearch" placeholder="Search customers...">
                        <button id="searchCustomerBtn">Search</button>
                    </div>
                    <button id="addCustomerBtn">Add New Customer</button>
                </div>
                
                <div class="customers-grid" id="customersGrid"></div>
                
                <div class="pagination" id="customersPagination"></div>
            </div>
        </div>
        
        <!-- Transactions Tab -->
        <div class="tab-content" id="transactions">
            <div class="paper">
                <div class="toolbar">
                    <div class="search-container">
                        <input type="text" id="transactionSearch" placeholder="Search transactions...">
                        <button id="searchTxnBtn">Search</button>
                    </div>
                    <div class="date-filters">
                        <label>From: <input type="date" id="fromDate"></label>
                        <label>To: <input type="date" id="toDate"></label>
                        <button class="filter-btn" id="filterDateBtn">Filter</button>
                    </div>
                    <button id="addTransactionBtn">Add Transaction</button>
                </div>
                
                <div class="table-container">
                    <table id="transactionsTable">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Customer</th>
                                <th>Type</th>
                                <th>Amount</th>
                                <th>Method</th>
                                <th>Balance</th>
                                <th class="no-print">Actions</th>
                            </tr>
                        </thead>
                        <tbody></tbody>
                    </table>
                </div>
                
                <div class="pagination" id="transactionsPagination"></div>
            </div>
        </div>
        
        <!-- Reports Tab -->
        <div class="tab-content" id="reports">
            <div class="paper">
                <h2>Generate Reports</h2>
                
                <div class="form-group">
                    <label for="reportType">Report Type</label>
                    <select id="reportType">
                        <option value="customer">Customer Statement</option>
                        <option value="monthly">Monthly Summary</option>
                        <option value="outstanding">Outstanding Balances</option>
                    </select>
                </div>
                
                <div id="reportCustomerSelect" class="form-group">
                    <label for="reportCustomer">Select Customer</label>
                    <select id="reportCustomer"></select>
                </div>
                
                <div id="reportDateRange" class="form-group">
                    <div class="date-filters">
                        <label>From: <input type="date" id="reportFromDate"></label>
                        <label>To: <input type="date" id="reportToDate"></label>
                    </div>
                </div>
                
                <button id="generateReportBtn">Generate Report</button>
                <button id="printReportBtn" class="secondary">Print Report</button>
                <button id="exportReportBtn" class="secondary">Export CSV</button>
                
                <div id="reportContainer" class="paper" style="margin-top: 2rem;"></div>
            </div>
        </div>
        
        <!-- Settings Tab -->
        <div class="tab-content" id="settings">
            <div class="paper">
                <h2>Settings</h2>
                
                <div class="form-group">
                    <label for="businessName">Business Name</label>
                    <input type="text" id="businessName" placeholder="Enter your business name">
                </div>
                
                <div class="form-group">
                    <label for="businessPhone">Business Phone</label>
                    <input type="text" id="businessPhone" placeholder="Enter your phone number">
                </div>
                
                <div class="form-group">
                    <label for="businessAddress">Business Address</label>
                    <textarea id="businessAddress" placeholder="Enter your business address"></textarea>
                </div>
                
                <button id="saveSettingsBtn">Save Settings</button>
                
                <h3 style="margin-top: 2rem;">Data Management</h3>
                
                <div class="backup-restore">
                    <button id="backupDataBtn">Backup Data</button>
                    <button id="restoreDataBtn" class="secondary">Restore Data</button>
                </div>
                
                <div id="dropArea" class="drop-area">
                    <p>Drag & drop backup file here or click to select file</p>
                    <input type="file" id="fileInput" accept=".json" style="display: none;">
                </div>
                
                <h3 style="margin-top: 2rem;">Reset Data</h3>
                <p>Warning: This will delete all your data and cannot be undone!</p>
                <button id="resetDataBtn" class="danger">Reset All Data</button>
            </div>
        </div>
        
        <!-- Add Customer Modal -->
        <div id="addCustomerModal" class="modal">
            <div class="modal-content">
                <span class="close" id="closeCustomerModal">&times;</span>
                <h2>Add New Customer</h2>
                <h3 class="urdu" style="display: none;">نیا گاہک شامل کریں</h3>
                
                <div class="form-group">
                    <label for="customerName">Customer Name</label>
                    <label for="customerName">Customer Name</label>
                    <label class="urdu" for="customerName" style="display: none;">گاہک کا نام</label>
                    <input type="text" id="customerName" class="handwritten" required>
                </div>
                
                <div class="form-group">
                    <label for="customerPhone">Phone Number</label>
                    <label class="urdu" for="customerPhone" style="display: none;">فون نمبر</label>
                    <input type="text" id="customerPhone" class="handwritten">
                </div>
                
                <div class="form-group">
                    <label for="customerAddress">Address</label>
                    <label class="urdu" for="customerAddress" style="display: none;">پتہ</label>
                    <textarea id="customerAddress" class="handwritten"></textarea>
                </div>
                
                <div class="form-group">
                    <label for="customerNotes">Notes</label>
                    <label class="urdu" for="customerNotes" style="display: none;">نوٹس</label>
                    <textarea id="customerNotes" class="handwritten"></textarea>
                </div>
                
                <input type="hidden" id="customerId">
                <button id="saveCustomerBtn">Save Customer</button>
                <button id="updateCustomerBtn" style="display: none;">Update Customer</button>
            </div>
        </div>
        
        <!-- Add Transaction Modal -->
        <div id="addTransactionModal" class="modal">
            <div class="modal-content">
                <span class="close" id="closeTransactionModal">&times;</span>
                <h2>Add New Transaction</h2>
                <h3 class="urdu" style="display: none;">نیا لین دین شامل کریں</h3>
                
                <div class="form-group">
                    <label for="transactionCustomer">Customer</label>
                    <label class="urdu" for="transactionCustomer" style="display: none;">گاہک</label>
                    <select id="transactionCustomer" required></select>
                </div>
                
                <div class="form-group">
                    <label for="transactionType">Transaction Type</label>
                    <label class="urdu" for="transactionType" style="display: none;">لین دین کی قسم</label>
                    <select id="transactionType" required>
                        <option value="udhaar">Udhaar (Credit)</option>
                        <option value="payment">Payment</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="transactionAmount">Amount (Rs.)</label>
                    <label class="urdu" for="transactionAmount" style="display: none;">رقم (روپے)</label>
                    <input type="number" id="transactionAmount" class="handwritten" required>
                </div>
                
                <div class="form-group">
                    <label for="transactionDate">Date</label>
                    <label class="urdu" for="transactionDate" style="display: none;">تاریخ</label>
                    <input type="date" id="transactionDate" required>
                </div>
                
                <div class="form-group">
                    <label for="paymentMethod">Payment Method</label>
                    <label class="urdu" for="paymentMethod" style="display: none;">ادائیگی کا طریقہ</label>
                    <select id="paymentMethod">
                        <option value="cash">Cash</option>
                        <option value="jazzcash">JazzCash</option>
                        <option value="easypaisa">EasyPaisa</option>
                        <option value="bank">Bank Transfer</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="transactionNotes">Notes</label>
                    <label class="urdu" for="transactionNotes" style="display: none;">نوٹس</label>
                    <textarea id="transactionNotes" class="handwritten"></textarea>
                </div>
                
                <input type="hidden" id="transactionId">
                <button id="saveTransactionBtn">Save Transaction</button>
                <button id="updateTransactionBtn" style="display: none;">Update Transaction</button>
            </div>
        </div>
        
        <!-- Customer Details Modal -->
        <div id="customerDetailsModal" class="modal">
            <div class="modal-content">
                <span class="close" id="closeCustomerDetailsModal">&times;</span>
                <div id="customerDetailsContent"></div>
                
                <div class="toolbar no-print">
                    <button id="addTxnForCustomerBtn">Add Transaction</button>
                    <button id="editCustomerBtn">Edit Customer</button>
                    <button id="deleteCustomerBtn" class="danger">Delete Customer</button>
                    <button id="printCustomerBtn" class="secondary">Print</button>
                    <button id="sendReminderBtn" class="secondary">Send Reminder</button>
                </div>
            </div>
        </div>
        
        <!-- Reminder Modal -->
        <div id="reminderModal" class="modal">
            <div class="modal-content">
                <span class="close" id="closeReminderModal">&times;</span>
                <h2>Payment Reminder</h2>
                <h3 class="urdu" style="display: none;">ادائیگی کی یاد دہانی</h3>
                
                <div class="form-group">
                    <label for="reminderType">Reminder Platform</label>
                    <select id="reminderType">
                        <option value="whatsapp">WhatsApp</option>
                        <option value="sms">SMS</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="reminderTemplate">Reminder Message</label>
                    <textarea id="reminderTemplate" rows="6"></textarea>
                </div>
                
                <div class="reminder-preview">
                    <h4>Preview:</h4>
                    <div id="reminderPreview"></div>
                </div>
                
                <button id="copyReminderBtn">Copy to Clipboard</button>
                <button id="sendWhatsAppBtn">Open in WhatsApp</button>
            </div>
        </div>
        
        <!-- Confirmation Modal -->
        <div id="confirmationModal" class="modal">
            <div class="modal-content">
                <h3>Are you sure?</h3>
                <p id="confirmationMessage"></p>
                <div class="toolbar">
                    <button id="confirmYesBtn">Yes</button>
                    <button id="confirmNoBtn">No</button>
                </div>
            </div>
        </div>
        
        <script>
            // Database initialization
            let db;
            const DB_NAME = 'PakistaniKhataDB';
            const DB_VERSION = 1;
            
            // Initialize IndexedDB
            function initDB() {
                return new Promise((resolve, reject) => {
                    const request = indexedDB.open(DB_NAME, DB_VERSION);
                    
                    request.onupgradeneeded = function(event) {
                        db = event.target.result;
                        
                        // Create Customers store
                        if (!db.objectStoreNames.contains('customers')) {
                            const customersStore = db.createObjectStore('customers', { keyPath: 'id', autoIncrement: true });
                            customersStore.createIndex('name', 'name', { unique: false });
                            customersStore.createIndex('phone', 'phone', { unique: false });
                        }
                        
                        // Create Transactions store
                        if (!db.objectStoreNames.contains('transactions')) {
                            const txnStore = db.createObjectStore('transactions', { keyPath: 'id', autoIncrement: true });
                            txnStore.createIndex('customerId', 'customerId', { unique: false });
                            txnStore.createIndex('date', 'date', { unique: false });
                            txnStore.createIndex('type', 'type', { unique: false });
                        }
                        
                        // Create Settings store
                        if (!db.objectStoreNames.contains('settings')) {
                            db.createObjectStore('settings', { keyPath: 'id' });
                        }
                    };
                    
                    request.onsuccess = function(event) {
                        db = event.target.result;
                        console.log('Database initialized successfully');
                        resolve(db);
                    };
                    
                    request.onerror = function(event) {
                        console.error('Error opening database:', event.target.error);
                        reject(event.target.error);
                    };
                });
            }
            
            // Utility Functions
            function formatDate(dateString) {
                const date = new Date(dateString);
                return date.toLocaleDateString('en-PK', { 
                    day: '2-digit', 
                    month: '2-digit', 
                    year: 'numeric' 
                });
            }
            
            function formatCurrency(amount) {
                return 'Rs. ' + Number(amount).toLocaleString('en-PK');
            }
            
            function generateId() {
                return Date.now().toString(36) + Math.random().toString(36).substring(2);
            }
            
            // Customer CRUD Operations
            async function addCustomer(customerData) {
                return new Promise((resolve, reject) => {
                    const transaction = db.transaction(['customers'], 'readwrite');
                    const store = transaction.objectStore('customers');
                    
                    const request = store.add({
                        name: customerData.name,
                        phone: customerData.phone || '',
                        address: customerData.address || '',
                        notes: customerData.notes || '',
                        createdAt: new Date().toISOString(),
                        updatedAt: new Date().toISOString()
                    });
                    
                    request.onsuccess = function(event) {
                        resolve(event.target.result);
                    };
                    
                    request.onerror = function(event) {
                        reject(event.target.error);
                    };
                });
            }
            
            async function updateCustomer(customerData) {
                return new Promise((resolve, reject) => {
                    const transaction = db.transaction(['customers'], 'readwrite');
                    const store = transaction.objectStore('customers');
                    
                    const request = store.get(Number(customerData.id));
                    
                    request.onsuccess = function(event) {
                        const data = event.target.result;
                        if (data) {
                            data.name = customerData.name;
                            data.phone = customerData.phone || '';
                            data.address = customerData.address || '';
                            data.notes = customerData.notes || '';
                            data.updatedAt = new Date().toISOString();
                            
                            const updateRequest = store.put(data);
                            
                            updateRequest.onsuccess = function() {
                                resolve(data);
                            };
                            
                            updateRequest.onerror = function(event) {
                                reject(event.target.error);
                            };
                        } else {
                            reject(new Error('Customer not found'));
                        }
                    };
                    
                    request.onerror = function(event) {
                        reject(event.target.error);
                    };
                });
            }
            
            async function deleteCustomer(customerId) {
                // First check if the customer has any transactions
                const hasTransactions = await checkCustomerTransactions(customerId);
                
                if (hasTransactions) {
                    throw new Error('Cannot delete customer with existing transactions');
                }
                
                return new Promise((resolve, reject) => {
                    const transaction = db.transaction(['customers'], 'readwrite');
                    const store = transaction.objectStore('customers');
                    
                    const request = store.delete(Number(customerId));
                    
                    request.onsuccess = function() {
                        resolve(true);
                    };
                    
                    request.onerror = function(event) {
                        reject(event.target.error);
                    };
                });
            }
            
            async function getCustomer(customerId) {
                return new Promise((resolve, reject) => {
                    const transaction = db.transaction(['customers'], 'readonly');
                    const store = transaction.objectStore('customers');
                    
                    const request = store.get(Number(customerId));
                    
                    request.onsuccess = function(event) {
                        resolve(event.target.result);
                    };
                    
                    request.onerror = function(event) {
                        reject(event.target.error);
                    };
                });
            }
            
            async function getAllCustomers() {
                return new Promise((resolve, reject) => {
                    const transaction = db.transaction(['customers'], 'readonly');
                    const store = transaction.objectStore('customers');
                    
                    const request = store.getAll();
                    
                    request.onsuccess = function(event) {
                        resolve(event.target.result);
                    };
                    
                    request.onerror = function(event) {
                        reject(event.target.error);
                    };
                });
            }
            
            async function searchCustomers(query) {
                const customers = await getAllCustomers();
                
                if (!query) return customers;
                
                query = query.toLowerCase();
                return customers.filter(customer => 
                    customer.name.toLowerCase().includes(query) || 
                    customer.phone.toLowerCase().includes(query) ||
                    customer.address.toLowerCase().includes(query) ||
                    customer.notes.toLowerCase().includes(query)
                );
            }
            
            // Transaction CRUD Operations
            async function addTransaction(txnData) {
                return new Promise((resolve, reject) => {
                    const transaction = db.transaction(['transactions'], 'readwrite');
                    const store = transaction.objectStore('transactions');
                    
                    const request = store.add({
                        customerId: Number(txnData.customerId),
                        type: txnData.type,
                        amount: Number(txnData.amount),
                        date: txnData.date,
                        paymentMethod: txnData.paymentMethod || 'cash',
                        notes: txnData.notes || '',
                        createdAt: new Date().toISOString()
                    });
                    
                    request.onsuccess = function(event) {
                        resolve(event.target.result);
                    };
                    
                    request.onerror = function(event) {
                        reject(event.target.error);
                    };
                });
            }
            
            async function updateTransaction(txnData) {
                return new Promise((resolve, reject) => {
                    const transaction = db.transaction(['transactions'], 'readwrite');
                    const store = transaction.objectStore('transactions');
                    
                    const request = store.get(Number(txnData.id));
                    
                    request.onsuccess = function(event) {
                        const data = event.target.result;
                        if (data) {
                            data.customerId = Number(txnData.customerId);
                            data.type = txnData.type;
                            data.amount = Number(txnData.amount);
                            data.date = txnData.date;
                            data.paymentMethod = txnData.paymentMethod || 'cash';
                            data.notes = txnData.notes || '';
                            
                            const updateRequest = store.put(data);
                            
                            updateRequest.onsuccess = function() {
                                resolve(data);
                            };
                            
                            updateRequest.onerror = function(event) {
                                reject(event.target.error);
                            };
                        } else {
                            reject(new Error('Transaction not found'));
                        }
                    };
                    
                    request.onerror = function(event) {
                        reject(event.target.error);
                    };
                });
            }
            
            async function deleteTransaction(txnId) {
                return new Promise((resolve, reject) => {
                    const transaction = db.transaction(['transactions'], 'readwrite');
                    const store = transaction.objectStore('transactions');
                    
                    const request = store.delete(Number(txnId));
                    
                    request.onsuccess = function() {
                        resolve(true);
                    };
                    
                    request.onerror = function(event) {
                        reject(event.target.error);
                    };
                });
            }
            
            async function getTransaction(txnId) {
                return new Promise((resolve, reject) => {
                    const transaction = db.transaction(['transactions'], 'readonly');
                    const store = transaction.objectStore('transactions');
                    
                    const request = store.get(Number(txnId));
                    
                    request.onsuccess = function(event) {
                        resolve(event.target.result);
                    };
                    
                    request.onerror = function(event) {
                        reject(event.target.error);
                    };
                });
            }
            
            async function getAllTransactions() {
                return new Promise((resolve, reject) => {
                    const transaction = db.transaction(['transactions'], 'readonly');
                    const store = transaction.objectStore('transactions');
                    
                    const request = store.getAll();
                    
                    request.onsuccess = function(event) {
                        resolve(event.target.result);
                    };
                    
                    request.onerror = function(event) {
                        reject(event.target.error);
                    };
                });
            }
            
            async function getCustomerTransactions(customerId) {
                return new Promise((resolve, reject) => {
                    const transaction = db.transaction(['transactions'], 'readonly');
                    const store = transaction.objectStore('transactions');
                    const index = store.index('customerId');
                    
                    const request = index.getAll(Number(customerId));
                    
                    request.onsuccess = function(event) {
                        resolve(event.target.result);
                    };
                    
                    request.onerror = function(event) {
                        reject(event.target.error);
                    };
                });
            }
            
            async function checkCustomerTransactions(customerId) {
                const transactions = await getCustomerTransactions(customerId);
                return transactions.length > 0;
            }
            
            async function searchTransactions(query) {
                const transactions = await getAllTransactions();
                const customers = await getAllCustomers();
                
                if (!query) return transactions;
                
                query = query.toLowerCase();
                
                // Create a map of customer ids to names for quick lookup
                const customerMap = {};
                customers.forEach(customer => {
                    customerMap[customer.id] = customer.name.toLowerCase();
                });
                
                return transactions.filter(txn => {
                    const customerName = customerMap[txn.customerId] || '';
                    
                    return customerName.includes(query) || 
                           txn.type.toLowerCase().includes(query) ||
                           txn.paymentMethod.toLowerCase().includes(query) ||
                           txn.notes.toLowerCase().includes(query) ||
                           txn.amount.toString().includes(query) ||
                           new Date(txn.date).toLocaleDateString().includes(query);
                });
            }
            
            async function getTransactionsByDateRange(startDate, endDate) {
                const transactions = await getAllTransactions();
                
                return transactions.filter(txn => {
                    const txnDate = new Date(txn.date);
                    const start = startDate ? new Date(startDate) : new Date(0);
                    const end = endDate ? new Date(endDate) : new Date();
                    
                    // Set end date to end of the day
                    end.setHours(23, 59, 59, 999);
                    
                    return txnDate >= start && txnDate <= end;
                }).sort((a, b) => new Date(b.date) - new Date(a.date));
            }
            
            // Balance Calculation
            async function calculateCustomerBalance(customerId) {
                const transactions = await getCustomerTransactions(customerId);
                
                let balance = 0;
                
                transactions.forEach(txn => {
                    if (txn.type === 'udhaar') {
                        balance += txn.amount;
                    } else if (txn.type === 'payment') {
                        balance -= txn.amount;
                    }
                });
                
                return balance;
            }
            
            async function calculateAllBalances() {
                const customers = await getAllCustomers();
                const result = {};
                
                for (const customer of customers) {
                    result[customer.id] = await calculateCustomerBalance(customer.id);
                }
                
                return result;
            }
            
            // Settings Management
            async function saveSettings(settings) {
                return new Promise((resolve, reject) => {
                    const transaction = db.transaction(['settings'], 'readwrite');
                    const store = transaction.objectStore('settings');
                    
                    const request = store.put({
                        id: 'businessInfo',
                        ...settings,
                        updatedAt: new Date().toISOString()
                    });
                    
                    request.onsuccess = function() {
                        resolve(true);
                    };
                    
                    request.onerror = function(event) {
                        reject(event.target.error);
                    };
                });
            }
            
            async function getSettings() {
                return new Promise((resolve, reject) => {
                    const transaction = db.transaction(['settings'], 'readonly');
                    const store = transaction.objectStore('settings');
                    
                    const request = store.get('businessInfo');
                    
                    request.onsuccess = function(event) {
                        resolve(event.target.result || {});
                    };
                    
                    request.onerror = function(event) {
                        reject(event.target.error);
                    };
                });
            }
            
            // Data Backup and Restore
            async function backupData() {
                const customers = await getAllCustomers();
                const transactions = await getAllTransactions();
                const settings = await getSettings();
                
                const backupData = {
                    customers,
                    transactions,
                    settings,
                    metadata: {
                        version: DB_VERSION,
                        date: new Date().toISOString(),
                        appName: 'Pakistani Khata System'
                    }
                };
                
                return JSON.stringify(backupData);
            }
            
            async function restoreData(backupJson) {
                try {
                    const backupData = JSON.parse(backupJson);
                    
                    // Validate backup data
                    if (!backupData.customers || !backupData.transactions || !backupData.metadata) {
                        throw new Error('Invalid backup file');
                    }
                    
                    // Clear existing data
                    await clearAllData();
                    
                    // Restore customers
                    const customerTxn = db.transaction(['customers'], 'readwrite');
                    const customerStore = customerTxn.objectStore('customers');
                    
                    for (const customer of backupData.customers) {
                        customerStore.add(customer);
                    }
                    
                    // Restore transactions
                    const txnTxn = db.transaction(['transactions'], 'readwrite');
                    const txnStore = txnTxn.objectStore('transactions');
                    
                    for (const txn of backupData.transactions) {
                        txnStore.add(txn);
                    }
                    
                    // Restore settings
                    if (backupData.settings && Object.keys(backupData.settings).length > 0) {
                        const settingsTxn = db.transaction(['settings'], 'readwrite');
                        const settingsStore = settingsTxn.objectStore('settings');
                        settingsStore.put(backupData.settings);
                    }
                    
                    return true;
                } catch (error) {
                    console.error('Error restoring data:', error);
                    throw new Error('Failed to restore data: ' + error.message);
                }
            }
            
            async function clearAllData() {
                // Clear customers
                let txn = db.transaction(['customers'], 'readwrite');
                let store = txn.objectStore('customers');
                store.clear();
                
                // Clear transactions
                txn = db.transaction(['transactions'], 'readwrite');
                store = txn.objectStore('transactions');
                store.clear();
                
                // Clear settings
                txn = db.transaction(['settings'], 'readwrite');
                store = txn.objectStore('settings');
                store.clear();
                
                return true;
            }
            
            // UI Functions
            function setupTabNavigation() {
                const tabs = document.querySelectorAll('.tab');
                
                tabs.forEach(tab => {
                    tab.addEventListener('click', () => {
                        // Hide all content
                        document.querySelectorAll('.tab-content').forEach(content => {
                            content.classList.remove('active');
                        });
                        
                        // Remove active class from all tabs
                        tabs.forEach(t => {
                            t.classList.remove('active');
                        });
                        
                        // Show the selected tab content
                        const tabId = tab.getAttribute('data-tab');
                        document.getElementById(tabId).classList.add('active');
                        
                        // Add active class to the clicked tab
                        tab.classList.add('active');
                        
                        // Load content based on tab
                        if (tabId === 'dashboard') {
                            loadDashboard();
                        } else if (tabId === 'customers') {
                            loadCustomers();
                        } else if (tabId === 'transactions') {
                            loadTransactions();
                        } else if (tabId === 'reports') {
                            loadReports();
                        } else if (tabId === 'settings') {
                            loadSettings();
                        }
                    });
                });
            }
            
            // Dashboard Tab
            async function loadDashboard() {
                try {
                    // Get all customers and transactions
                    const customers = await getAllCustomers();
                    const transactions = await getAllTransactions();
                    const balances = await calculateAllBalances();
                    
                    // Calculate totals
                    document.getElementById('totalCustomers').textContent = customers.length;
                    
                    let totalDue = 0;
                    let totalPaid = 0;
                    
                    transactions.forEach(txn => {
                        if (txn.type === 'udhaar') {
                            totalDue += txn.amount;
                        } else if (txn.type === 'payment') {
                            totalPaid += txn.amount;
                        }
                    });
                    
                    document.getElementById('totalDue').textContent = formatCurrency(totalDue);
                    document.getElementById('totalPaid').textContent = formatCurrency(totalPaid);
                    document.getElementById('currentBalance').textContent = formatCurrency(totalDue - totalPaid);
                    
                    // Recent transactions
                    const recentTxns = transactions
                        .sort((a, b) => new Date(b.date) - new Date(a.date))
                        .slice(0, 10);
                    
                    const recentTxnsTable = document.getElementById('recentTransactions').getElementsByTagName('tbody')[0];
                    recentTxnsTable.innerHTML = '';
                    
                    // Create a map of customer ids to names for quick lookup
                    const customerMap = {};
                    customers.forEach(customer => {
                        customerMap[customer.id] = customer.name;
                    });
                    
                    // Calculate running balance for each transaction
                    let customerBalances = {};
                    
                    recentTxns.forEach(txn => {
                        const row = document.createElement('tr');
                        
                        if (!customerBalances[txn.customerId]) {
                            customerBalances[txn.customerId] = 0;
                        }
                        
                        if (txn.type === 'udhaar') {
                            customerBalances[txn.customerId] += txn.amount;
                        } else {
                            customerBalances[txn.customerId] -= txn.amount;
                        }
                        
                        row.innerHTML = `
                            <td>${formatDate(txn.date)}</td>
                            <td>${customerMap[txn.customerId] || 'Unknown Customer'}</td>
                            <td>${txn.type === 'udhaar' ? 'Udhaar' : 'Payment'}</td>
                            <td>${formatCurrency(txn.amount)}</td>
                            <td>${formatCurrency(customerBalances[txn.customerId])}</td>
                        `;
                        
                        recentTxnsTable.appendChild(row);
                    });
                    
                    // Top customers
                    const topCustomersTable = document.getElementById('topCustomers').getElementsByTagName('tbody')[0];
                    topCustomersTable.innerHTML = '';
                    
                    // Calculate total business for each customer
                    const customerBusiness = {};
                    const customerLastTxn = {};
                    
                    for (const customer of customers) {
                        customerBusiness[customer.id] = 0;
                        customerLastTxn[customer.id] = null;
                    }
                    
                    transactions.forEach(txn => {
                        customerBusiness[txn.customerId] = (customerBusiness[txn.customerId] || 0) + txn.amount;
                        
                        if (!customerLastTxn[txn.customerId] || new Date(txn.date) > new Date(customerLastTxn[txn.customerId].date)) {
                            customerLastTxn[txn.customerId] = txn;
                        }
                    });
                    
                    // Sort customers by total business
                    const sortedCustomers = [...customers].sort((a, b) => 
                        (customerBusiness[b.id] || 0) - (customerBusiness[a.id] || 0)
                    ).slice(0, 5);
                    
                    sortedCustomers.forEach(customer => {
                        const row = document.createElement('tr');
                        const lastTxn = customerLastTxn[customer.id];
                        
                        row.innerHTML = `
                            <td>${customer.name}</td>
                            <td>${formatCurrency(customerBusiness[customer.id] || 0)}</td>
                            <td>${formatCurrency(balances[customer.id] || 0)}</td>
                            <td>${lastTxn ? formatDate(lastTxn.date) : 'No transactions'}</td>
                        `;
                        
                        topCustomersTable.appendChild(row);
                    });
                    
                } catch (error) {
                    console.error('Error loading dashboard:', error);
                    alert('Failed to load dashboard data');
                }
            }
            
            // Customers Tab
            async function loadCustomers(page = 1, searchQuery = '') {
                try {
                    let customers = await searchCustomers(searchQuery);
                    const balances = await calculateAllBalances();
					const ITEMS_PER_PAGE = 12; // Number of customers per page
                    const totalPages = Math.ceil(customers.length / ITEMS_PER_PAGE);
                    const startIndex = (page - 1) * ITEMS_PER_PAGE;
                    const endIndex = startIndex + ITEMS_PER_PAGE;
                    const paginatedCustomers = customers.slice(startIndex, endIndex);

                    const grid = document.getElementById('customersGrid');
                    grid.innerHTML = ''; // Clear previous customers

                    paginatedCustomers.forEach(customer => {
                        const balance = balances[customer.id] || 0;
                        const card = document.createElement('div');
                        card.className = 'customer-card';
                        card.dataset.customerId = customer.id;

                        let balanceClass = 'zero';
                        if (balance > 0) {
                            balanceClass = 'negative'; // Negative balance means customer owes money
                        } else if (balance < 0) {
                            balanceClass = 'positive'; // Positive balance means customer has paid extra (unlikely in khata)
                        }

                        card.innerHTML = `
                            <div class="balance-indicator ${balanceClass}"></div>
                            <h4>${customer.name}</h4>
                            <p>${customer.phone || 'No phone number'}</p>
                            <p>Balance: ${formatCurrency(balance)}</p>
                        `;

                        card.addEventListener('click', () => {
                            openCustomerDetailsModal(customer.id);
                        });

                        grid.appendChild(card);
                    });

                    renderPagination('customersPagination', page, totalPages, (newPage) => {
                        loadCustomers(newPage, searchQuery);
                    });

                } catch (error) {
                    console.error('Error loading customers:', error);
                    alert('Failed to load customer data');
                }
            }

            function renderPagination(containerId, currentPage, totalPages, pageClickHandler) {
                const paginationContainer = document.getElementById(containerId);
                paginationContainer.innerHTML = '';

                if (totalPages <= 1) return;

                // Previous button
                const prevButton = document.createElement('button');
                prevButton.textContent = '<< Prev';
                prevButton.disabled = currentPage === 1;
                prevButton.addEventListener('click', () => pageClickHandler(currentPage - 1));
                paginationContainer.appendChild(prevButton);

                // Page numbers (simplified for brevity, could add ellipses for many pages)
                const maxPagesToShow = 5;
                let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));
                let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);

                if (endPage - startPage + 1 < maxPagesToShow) {
                     startPage = Math.max(1, endPage - maxPagesToShow + 1);
                }


                if (startPage > 1) {
                    const firstButton = document.createElement('button');
                    firstButton.textContent = '1';
                    firstButton.addEventListener('click', () => pageClickHandler(1));
                    paginationContainer.appendChild(firstButton);
                    if (startPage > 2) {
                        const ellipsis = document.createElement('span');
                        ellipsis.textContent = '...';
                        ellipsis.style.padding = '0 0.5rem';
                        paginationContainer.appendChild(ellipsis);
                    }
                }


                for (let i = startPage; i <= endPage; i++) {
                    const pageButton = document.createElement('button');
                    pageButton.textContent = i;
                    if (i === currentPage) {
                        pageButton.style.fontWeight = 'bold';
                        pageButton.style.backgroundColor = 'var(--accent-color)';
                        pageButton.disabled = true;
                    }
                    pageButton.addEventListener('click', () => pageClickHandler(i));
                    paginationContainer.appendChild(pageButton);
                }

                 if (endPage < totalPages) {
                     if (endPage < totalPages - 1) {
                         const ellipsis = document.createElement('span');
                         ellipsis.textContent = '...';
                         ellipsis.style.padding = '0 0.5rem';
                         paginationContainer.appendChild(ellipsis);
                     }
                     const lastButton = document.createElement('button');
                     lastButton.textContent = totalPages;
                     lastButton.addEventListener('click', () => pageClickHandler(totalPages));
                     paginationContainer.appendChild(lastButton);
                 }


                // Next button
                const nextButton = document.createElement('button');
                nextButton.textContent = 'Next >>';
                nextButton.disabled = currentPage === totalPages;
                nextButton.addEventListener('click', () => pageClickHandler(currentPage + 1));
                paginationContainer.appendChild(nextButton);
            }


            // Transactions Tab
            async function loadTransactions(page = 1, searchQuery = '', startDate = null, endDate = null) {
                try {
                    let transactions;
                    if (startDate || endDate) {
                        transactions = await getTransactionsByDateRange(startDate, endDate);
                    } else {
                        transactions = await searchTransactions(searchQuery);
                    }

                    // Sort by date descending before pagination
                    transactions.sort((a, b) => new Date(b.date) - new Date(a.date));

                    const customers = await getAllCustomers();
                    const customerMap = {};
                    customers.forEach(customer => {
                        customerMap[customer.id] = customer.name;
                    });

                    // Calculate running balance per customer within the filtered/searched context
                    const runningBalances = {};
                    const allTransactions = await getAllTransactions(); // Need all for accurate balance calculation
                    allTransactions.sort((a, b) => new Date(a.date) - new Date(b.date)); // Sort chronologically

                    const customerBalances = {};
                     allTransactions.forEach(txn => {
                         const customerId = txn.customerId;
                         if (customerBalances[customerId] === undefined) {
                             customerBalances[customerId] = 0;
                         }
                         if (txn.type === 'udhaar') {
                             customerBalances[customerId] += txn.amount;
                         } else if (txn.type === 'payment') {
                             customerBalances[customerId] -= txn.amount;
                         }
                         runningBalances[txn.id] = customerBalances[customerId]; // Store balance after this transaction
                     });


                    const ITEMS_PER_PAGE = 15;
                    const totalPages = Math.ceil(transactions.length / ITEMS_PER_PAGE);
                    const startIndex = (page - 1) * ITEMS_PER_PAGE;
                    const endIndex = startIndex + ITEMS_PER_PAGE;
                    const paginatedTransactions = transactions.slice(startIndex, endIndex);


                    const tableBody = document.getElementById('transactionsTable').getElementsByTagName('tbody')[0];
                    tableBody.innerHTML = '';

                    paginatedTransactions.forEach(txn => {
                        const row = document.createElement('tr');
                        const balanceAfterTxn = runningBalances[txn.id] !== undefined ? runningBalances[txn.id] : await calculateCustomerBalance(txn.customerId); // Fallback, might be slow

                        row.innerHTML = `
                            <td>${formatDate(txn.date)}</td>
                            <td>${customerMap[txn.customerId] || 'Unknown Customer'}</td>
                            <td>${txn.type === 'udhaar' ? 'Udhaar' : 'Payment'}</td>
                            <td>${formatCurrency(txn.amount)}</td>
                            <td>${txn.paymentMethod || '-'}</td>
                            <td>${formatCurrency(balanceAfterTxn)}</td>
                            <td class="no-print">
                                <button class="action-btn edit-txn-btn" data-id="${txn.id}">✏️</button>
                                <button class="action-btn delete-txn-btn" data-id="${txn.id}">🗑️</button>
                            </td>
                        `;
                        tableBody.appendChild(row);
                    });

                    // Add event listeners for edit/delete buttons
                    tableBody.querySelectorAll('.edit-txn-btn').forEach(btn => {
                        btn.addEventListener('click', () => openEditTransactionModal(btn.dataset.id));
                    });
                    tableBody.querySelectorAll('.delete-txn-btn').forEach(btn => {
                         btn.addEventListener('click', () => confirmDeleteTransaction(btn.dataset.id));
                    });


                    renderPagination('transactionsPagination', page, totalPages, (newPage) => {
                         loadTransactions(newPage, searchQuery, startDate, endDate);
                    });


                } catch (error) {
                    console.error('Error loading transactions:', error);
                    alert('Failed to load transaction data');
                }
            }

             // Reports Tab
            async function loadReports() {
                try {
                    const customers = await getAllCustomers();
                    const select = document.getElementById('reportCustomer');
                    select.innerHTML = '<option value="">Select Customer</option>'; // Add a default option
                    customers.sort((a, b) => a.name.localeCompare(b.name)).forEach(customer => {
                        const option = document.createElement('option');
                        option.value = customer.id;
                        option.textContent = customer.name;
                        select.appendChild(option);
                    });

                    // Set default dates (e.g., start of month to today)
                    const today = new Date();
                    const firstDayOfMonth = new Date(today.getFullYear(), today.getMonth(), 1);
                    document.getElementById('reportFromDate').valueAsDate = firstDayOfMonth;
                    document.getElementById('reportToDate').valueAsDate = today;


                     // Toggle customer select visibility based on report type
                    const reportTypeSelect = document.getElementById('reportType');
                    const customerSelectDiv = document.getElementById('reportCustomerSelect');
                    const dateRangeDiv = document.getElementById('reportDateRange');

                    function toggleReportOptions() {
                        const type = reportTypeSelect.value;
                        if (type === 'customer') {
                            customerSelectDiv.style.display = 'block';
                            dateRangeDiv.style.display = 'block';
                        } else if (type === 'monthly') {
                             customerSelectDiv.style.display = 'none';
                             dateRangeDiv.style.display = 'block'; // Monthly summary needs a range too
                         } else if (type === 'outstanding') {
                            customerSelectDiv.style.display = 'none';
                            dateRangeDiv.style.display = 'none'; // Outstanding balances don't typically need a date range
                        }
                    }

                    reportTypeSelect.addEventListener('change', toggleReportOptions);
                    toggleReportOptions(); // Initial call


                } catch (error) {
                    console.error('Error loading reports tab:', error);
                    alert('Failed to initialize reports tab');
                }
            }

            async function generateReport() {
                const reportType = document.getElementById('reportType').value;
                const reportContainer = document.getElementById('reportContainer');
                reportContainer.innerHTML = '<div class="loading"></div>'; // Show loading indicator

                try {
                    const settings = await getSettings();
                    const businessName = settings.businessName || 'Your Business';
                    const reportDate = new Date().toLocaleString('en-PK');


                     let reportHTML = `
                         <div class="print-section">
                             <h3>${businessName}</h3>
                             <p>Report Generated: ${reportDate}</p>
                             <hr>
                         </div>
                     `;


                    if (reportType === 'customer') {
                        const customerId = document.getElementById('reportCustomer').value;
                        const fromDate = document.getElementById('reportFromDate').value;
                        const toDate = document.getElementById('reportToDate').value;

                        if (!customerId) {
                            reportContainer.innerHTML = '<p style="color: red;">Please select a customer.</p>';
                            return;
                        }

                        reportHTML += await generateCustomerStatement(Number(customerId), fromDate, toDate);


                    } else if (reportType === 'monthly') {
                         const fromDate = document.getElementById('reportFromDate').value;
                         const toDate = document.getElementById('reportToDate').value;
                         reportHTML += await generateMonthlySummary(fromDate, toDate);
                    } else if (reportType === 'outstanding') {
                         reportHTML += await generateOutstandingBalancesReport();
                    }


                    reportContainer.innerHTML = reportHTML;
                    document.getElementById('printReportBtn').style.display = 'inline-block';
                    document.getElementById('exportReportBtn').style.display = 'inline-block';


                } catch (error) {
                     console.error('Error generating report:', error);
                     reportContainer.innerHTML = `<p style="color: red;">Error generating report: ${error.message}</p>`;
                     document.getElementById('printReportBtn').style.display = 'none';
                     document.getElementById('exportReportBtn').style.display = 'none';
                }
            }

             async function generateCustomerStatement(customerId, startDate, endDate) {
                 const customer = await getCustomer(customerId);
                 if (!customer) return '<p>Customer not found.</p>';

                 let transactions = await getCustomerTransactions(customerId);


                 // Filter by date if provided
                 const start = startDate ? new Date(startDate) : null;
                 const end = endDate ? new Date(endDate) : null;
                 if (start || end) {
                     transactions = transactions.filter(txn => {
                         const txnDate = new Date(txn.date);
                         const afterStart = start ? txnDate >= start : true;
                         let beforeEnd = true;
                         if (end) {
                             const endOfDay = new Date(end);
                             endOfDay.setHours(23, 59, 59, 999);
                              beforeEnd = txnDate <= endOfDay;
                          }
                          return afterStart && beforeEnd;
                      });
                  }


                 transactions.sort((a, b) => new Date(a.date) - new Date(b.date)); // Sort chronologically for balance calc

                 // Calculate opening balance (balance before the start date)
                 let openingBalance = 0;
                 const allCustomerTxns = await getCustomerTransactions(customerId);
                 allCustomerTxns.sort((a, b) => new Date(a.date) - new Date(b.date));

                  allCustomerTxns.forEach(txn => {
                      const txnDate = new Date(txn.date);
                      if (start && txnDate >= start) {
                           return; // Stop calculating for opening balance
                      }
                      if (txn.type === 'udhaar') {
                           openingBalance += txn.amount;
                      } else if (txn.type === 'payment') {
                           openingBalance -= txn.amount;
                      }
                  });


                 let statementHTML = `<h4>Customer Statement: ${customer.name}</h4>`;
                 if (startDate || endDate) {
                     statementHTML += `<p>Period: ${startDate ? formatDate(startDate) : 'Start'} - ${endDate ? formatDate(endDate) : 'End'}</p>`;
                 }
                  statementHTML += `<p>Opening Balance: ${formatCurrency(openingBalance)}</p>`;
                  statementHTML += `
                      <table>
                          <thead>
                              <tr><th>Date</th><th>Description</th><th>Debit (Udhaar)</th><th>Credit (Payment)</th><th>Balance</th></tr>
                          </thead>
                          <tbody>
                  `;


                 let currentBalance = openingBalance;
                 transactions.forEach(txn => {
                     let debit = '';
                     let credit = '';
                     if (txn.type === 'udhaar') {
                         debit = formatCurrency(txn.amount);
                         currentBalance += txn.amount;
                     } else {
                         credit = formatCurrency(txn.amount);
                         currentBalance -= txn.amount;
                     }
                     statementHTML += `
                         <tr>
                             <td>${formatDate(txn.date)}</td>
                             <td>${txn.notes || (txn.type === 'udhaar' ? 'Goods/Service' : 'Payment Received')} (${txn.paymentMethod || 'Cash'})</td>
                             <td>${debit}</td>
                             <td>${credit}</td>
                             <td>${formatCurrency(currentBalance)}</td>
                         </tr>
                     `;
                 });


                 statementHTML += `
                         </tbody>
                         <tfoot>
                             <tr>
                                  <td colspan="4" style="text-align: right; font-weight: bold;">Closing Balance:</td>
                                  <td style="font-weight: bold;">${formatCurrency(currentBalance)}</td>
                             </tr>
                         </tfoot>
                     </table>
                 `;


                 return statementHTML;
             }


            async function generateMonthlySummary(startDate, endDate) {
                 let transactions = await getTransactionsByDateRange(startDate, endDate);
                 const customers = await getAllCustomers();
                 const customerMap = {};
                 customers.forEach(c => customerMap[c.id] = c.name);

                 let totalUdhaar = 0;
                 let totalPayments = 0;
                 const customerSummary = {}; // { customerId: { udhaar: x, payment: y } }

                 transactions.forEach(txn => {
                      if (!customerSummary[txn.customerId]) {
                           customerSummary[txn.customerId] = { udhaar: 0, payment: 0 };
                      }

                      if (txn.type === 'udhaar') {
                           totalUdhaar += txn.amount;
                           customerSummary[txn.customerId].udhaar += txn.amount;
                       } else if (txn.type === 'payment') {
                           totalPayments += txn.amount;
                           customerSummary[txn.customerId].payment += txn.amount;
                       }
                  });

                  let summaryHTML = `<h4>Monthly Summary</h4>`;
                  summaryHTML += `<p>Period: ${startDate ? formatDate(startDate) : 'Start'} - ${endDate ? formatDate(endDate) : 'End'}</p>`;
                  summaryHTML += `
                      <p><strong>Total Udhaar (Credit Given):</strong> ${formatCurrency(totalUdhaar)}</p>
                      <p><strong>Total Payments Received:</strong> ${formatCurrency(totalPayments)}</p>
                      <p><strong>Net Change:</strong> ${formatCurrency(totalUdhaar - totalPayments)}</p>
                      <hr>
                      <h5>Summary by Customer:</h5>
                      <table>
                           <thead>
                               <tr><th>Customer</th><th>Total Udhaar</th><th>Total Payment</th><th>Net Change</th></tr>
                           </thead>
                           <tbody>
                   `;

                   for (const customerId in customerSummary) {
                       const summary = customerSummary[customerId];
                       const netChange = summary.udhaar - summary.payment;
                       summaryHTML += `
                           <tr>
                               <td>${customerMap[customerId] || 'Unknown Customer'}</td>
                               <td>${formatCurrency(summary.udhaar)}</td>
                               <td>${formatCurrency(summary.payment)}</td>
                               <td>${formatCurrency(netChange)}</td>
                           </tr>
                       `;
                   }

                   summaryHTML += `</tbody></table>`;
                   return summaryHTML;
            }

            async function generateOutstandingBalancesReport() {
                const customers = await getAllCustomers();
                const balances = await calculateAllBalances();

                let reportHTML = `<h4>Outstanding Balances Report</h4>`;
                reportHTML += `<table>
                    <thead>
                         <tr><th>Customer</th><th>Phone</th><th>Balance</th><th>Last Transaction Date</th></tr>
                    </thead>
                    <tbody>
                 `;

                let totalOutstanding = 0;
                 const customersWithBalance = [];

                 for (const customer of customers) {
                     const balance = balances[customer.id] || 0;
                     if (balance !== 0) { // Only show customers with non-zero balance
                          customersWithBalance.push({ ...customer, balance });
                          if (balance > 0) { // Customer owes money
                              totalOutstanding += balance;
                          }
                     }
                 }

                 // Sort by balance descending (highest amount owed first)
                 customersWithBalance.sort((a, b) => b.balance - a.balance);

                 // Get last transaction date for each customer (can be slow if many customers/txns)
                 const allTxns = await getAllTransactions();
                 const lastTxnDates = {};
                 allTxns.sort((a,b) => new Date(b.date) - new Date(a.date)); // Sort descending by date
                 allTxns.forEach(txn => {
                      if (!lastTxnDates[txn.customerId]) {
                          lastTxnDates[txn.customerId] = txn.date;
                      }
                  });

                 customersWithBalance.forEach(customer => {
                      const lastTxnDate = lastTxnDates[customer.id];
                      reportHTML += `
                           <tr>
                                <td>${customer.name}</td>
                                <td>${customer.phone || '-'}</td>
                                <td style="${customer.balance > 0 ? 'color:red;' : 'color:green;'}">${formatCurrency(customer.balance)}</td>
                                <td>${lastTxnDate ? formatDate(lastTxnDate) : 'N/A'}</td>
                            </tr>
                      `;
                 });

                 reportHTML += `
                    </tbody>
                    <tfoot>
                         <tr>
                             <td colspan="2" style="text-align: right; font-weight: bold;">Total Outstanding (Owed by Customers):</td>
                             <td style="font-weight: bold; color: red;">${formatCurrency(totalOutstanding)}</td>
                             <td></td>
                         </tr>
                    </tfoot>
                    </table>`;
                 return reportHTML;
            }


            function printReport() {
                const reportContainer = document.getElementById('reportContainer');
                const printWindow = window.open('', '_blank');
                 printWindow.document.write(`
                     <html>
                         <head>
                             <title>Khata Report</title>
                             <style>
                                  body { font-family: sans-serif; line-height: 1.4; }
                                  table { width: 100%; border-collapse: collapse; margin-bottom: 1rem; }
                                  th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                                  th { background-color: #f2f2f2; }
                                  h3, h4, h5 { margin-top: 1.5rem; margin-bottom: 0.5rem; }
                                  hr { border: 0; border-top: 1px solid #eee; margin: 1rem 0; }
                                  .print-section { margin-bottom: 1rem; }
                                  @media print {
                                       .no-print { display: none; }
                                   }
                              </style>
                          </head>
                          <body>${reportContainer.innerHTML}</body>
                      </html>
                  `);
                  printWindow.document.close(); // Necessary for some browsers
                  printWindow.focus(); // Necessary for some browsers
                  // Delay print command slightly to ensure content is loaded
                  setTimeout(() => {
                      printWindow.print();
                      printWindow.close();
                  }, 250);
            }


            function exportReportToCSV() {
                const reportContainer = document.getElementById('reportContainer');
                const table = reportContainer.querySelector('table');
                 if (!table) {
                     alert('No table found in the report to export.');
                     return;
                 }

                 let csv = [];
                 const headers = [];
                 // Add report title and period if available
                 const title = reportContainer.querySelector('h4');
                 const period = reportContainer.querySelector('p'); // Assuming period is in the first <p> after title
                 if (title) csv.push([title.textContent.trim()]);
                 if (period && period.textContent.includes('Period:')) csv.push([period.textContent.trim()]);
                 if (title || period) csv.push([]); // Add a blank row


                  // Get headers
                  table.querySelectorAll('thead th').forEach(th => headers.push(`"${th.textContent.trim().replace(/"/g, '""')}"`));
                  csv.push(headers.join(','));


                  // Get rows
                  table.querySelectorAll('tbody tr').forEach(row => {
                       const rowData = [];
                       row.querySelectorAll('td').forEach(td => rowData.push(`"${td.textContent.trim().replace(/"/g, '""')}"`));
                       csv.push(rowData.join(','));
                  });

                  // Get footers if any
                  table.querySelectorAll('tfoot tr').forEach(row => {
                       const rowData = [];
                       row.querySelectorAll('td').forEach(td => rowData.push(`"${td.textContent.trim().replace(/"/g, '""')}"`));
                       csv.push(rowData.join(','));
                   });

                  const csvContent = csv.join('\n');
                  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });


                  // Create download link
                  const link = document.createElement("a");
                  const url = URL.createObjectURL(blob);
                  link.setAttribute("href", url);
                  const reportType = document.getElementById('reportType').value;
                  const fileName = `Khata_Report_${reportType}_${new Date().toISOString().slice(0,10)}.csv`;
                  link.setAttribute("download", fileName);
                  link.style.visibility = 'hidden';
                  document.body.appendChild(link);
                  link.click();
                  document.body.removeChild(link);
            }




             // Settings Tab
            async function loadSettings() {
                try {
                    const settings = await getSettings();
                    document.getElementById('businessName').value = settings.businessName || '';
                    document.getElementById('businessPhone').value = settings.businessPhone || '';
                    document.getElementById('businessAddress').value = settings.businessAddress || '';
                    // Load other settings if added later
                } catch (error) {
                     console.error('Error loading settings:', error);
                     alert('Failed to load settings data');
                 }
            }

            async function saveSettingsHandler() {
                 const settings = {
                      businessName: document.getElementById('businessName').value.trim(),
                      businessPhone: document.getElementById('businessPhone').value.trim(),
                      businessAddress: document.getElementById('businessAddress').value.trim(),
                      // Add other settings here
                  };
                  try {
                      await saveSettings(settings);
                      alert('Settings saved successfully!');
                      // Maybe update UI elements that use settings, like header title if dynamic
                   } catch (error) {
                       console.error('Error saving settings:', error);
                       alert('Failed to save settings: ' + error.message);
                   }
            }


            // Data Management Functions (Backup, Restore, Reset)
            async function backupDataHandler() {
                 try {
                     const backupJson = await backupData();
                     const blob = new Blob([backupJson], { type: 'application/json' });
                     const url = URL.createObjectURL(blob);
                     const link = document.createElement('a');
                     link.href = url;
                     link.download = `pakistani_khata_backup_${new Date().toISOString().slice(0,10)}.json`;
                     document.body.appendChild(link);
                     link.click();
                     document.body.removeChild(link);
                     URL.revokeObjectURL(url);
                     alert('Backup created successfully!');
                  } catch (error) {
                      console.error('Error creating backup:', error);
                      alert('Failed to create backup: ' + error.message);
                  }
             }

            function triggerRestore() {
                 document.getElementById('fileInput').click();
            }


            async function restoreDataHandler(file) {
                 if (!file) {
                     alert('No file selected.');
                     return;
                 }
                 if (!file.name.endsWith('.json')) {
                     alert('Invalid file type. Please select a .json backup file.');
                     return;
                 }

                 const reader = new FileReader();
                 reader.onload = async function(event) {
                     const backupJson = event.target.result;
                     openConfirmationModal('Are you sure you want to restore data? This will overwrite all current data.', async () => {
                          try {
                              await restoreData(backupJson);
                              alert('Data restored successfully! The application will now reload.');
                              // Reload all data displays and potentially the page
                              await loadAllData(); // Reload data in current view
                              // Or maybe just reload the page: location.reload();
                           } catch (error) {
                               console.error('Error restoring data:', error);
                               alert('Failed to restore data: ' + error.message);
                           }
                      });
                  };
                  reader.onerror = function(event) {
                      console.error("File reading error:", event.target.error);
                      alert("Failed to read file.");
                  };
                  reader.readAsText(file);
             }


            function setupDragAndDrop() {
                 const dropArea = document.getElementById('dropArea');

                 ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                      dropArea.addEventListener(eventName, preventDefaults, false);
                  });

                  function preventDefaults(e) {
                      e.preventDefault();
                      e.stopPropagation();
                  }

                  ['dragenter', 'dragover'].forEach(eventName => {
                       dropArea.addEventListener(eventName, highlight, false);
                   });

                   ['dragleave', 'drop'].forEach(eventName => {
                       dropArea.addEventListener(eventName, unhighlight, false);
                   });

                   function highlight(e) {
                       dropArea.style.borderColor = 'var(--accent-color)';
                       dropArea.style.backgroundColor = 'rgba(218, 165, 32, 0.1)';
                   }

                   function unhighlight(e) {
                        dropArea.style.borderColor = '#ddd';
                        dropArea.style.backgroundColor = 'transparent';
                   }

                  dropArea.addEventListener('drop', handleDrop, false);
                  dropArea.addEventListener('click', triggerRestore); // Allow click to select file too
                  document.getElementById('fileInput').addEventListener('change', (event) => {
                       if (event.target.files.length > 0) {
                            restoreDataHandler(event.target.files[0]);
                        }
                   });


                   function handleDrop(e) {
                       let dt = e.dataTransfer;
                       let files = dt.files;

                       if (files.length > 0) {
                            restoreDataHandler(files[0]);
                       }
                   }
             }

            function confirmResetData() {
                openConfirmationModal('WARNING: This will permanently delete ALL customers and transactions. This action cannot be undone. Are you absolutely sure?', async () => {
                     try {
                         await clearAllData();
                         alert('All data has been reset. The application will now reload.');
                         // Reload everything
                         await loadAllData(); // Reload data in current view
                          // Or maybe just reload the page: location.reload();
                     } catch (error) {
                         console.error('Error resetting data:', error);
                         alert('Failed to reset data: ' + error.message);
                     }
                });
            }



            // Modal Handling
            function openModal(modalId) {
                 document.getElementById(modalId).style.display = 'block';
            }

            function closeModal(modalId) {
                 document.getElementById(modalId).style.display = 'none';
                 // Reset forms inside modal if needed
                 const form = document.getElementById(modalId).querySelector('form');
                 if (form) {
                      form.reset();
                  }
                  // Clear specific fields if not a form
                  if (modalId === 'addCustomerModal') {
                      document.getElementById('customerName').value = '';
                      document.getElementById('customerPhone').value = '';
                      document.getElementById('customerAddress').value = '';
                      document.getElementById('customerNotes').value = '';
                      document.getElementById('customerId').value = '';
                      document.getElementById('saveCustomerBtn').style.display = 'inline-block';
                      document.getElementById('updateCustomerBtn').style.display = 'none';
                      document.querySelector('#addCustomerModal h2').textContent = 'Add New Customer';
                      document.querySelector('#addCustomerModal .urdu').textContent = 'نیا گاہک شامل کریں'; // Reset title
                  } else if (modalId === 'addTransactionModal') {
                      document.getElementById('transactionCustomer').value = '';
                      document.getElementById('transactionType').value = 'udhaar';
                      document.getElementById('transactionAmount').value = '';
                       document.getElementById('transactionDate').valueAsDate = new Date(); // Set to today
                       document.getElementById('paymentMethod').value = 'cash';
                       document.getElementById('transactionNotes').value = '';
                       document.getElementById('transactionId').value = '';
                       document.getElementById('saveTransactionBtn').style.display = 'inline-block';
                       document.getElementById('updateTransactionBtn').style.display = 'none';
                       document.querySelector('#addTransactionModal h2').textContent = 'Add New Transaction';
                       document.querySelector('#addTransactionModal .urdu').textContent = 'نیا لین دین شامل کریں'; // Reset title
                   } else if (modalId === 'customerDetailsModal') {
                       document.getElementById('customerDetailsContent').innerHTML = ''; // Clear details
                   } else if (modalId === 'reminderModal') {
                       document.getElementById('reminderTemplate').value = '';
                       document.getElementById('reminderPreview').innerHTML = '';
                   }
            }


            // Customer Modal Functions
            function openAddCustomerModal() {
                 // Reset form fields for adding
                 closeModal('addCustomerModal'); // Ensure reset happens
                 document.getElementById('saveCustomerBtn').style.display = 'inline-block';
                 document.getElementById('updateCustomerBtn').style.display = 'none';
                 document.querySelector('#addCustomerModal h2').textContent = 'Add New Customer';
                 document.querySelector('#addCustomerModal .urdu').textContent = 'نیا گاہک شامل کریں';
                 openModal('addCustomerModal');
            }

            async function openEditCustomerModal(customerId) {
                 try {
                      const customer = await getCustomer(customerId);
                      if (!customer) {
                           alert('Customer not found.');
                           return;
                      }
                      // Populate form fields
                      document.getElementById('customerId').value = customer.id;
                      document.getElementById('customerName').value = customer.name;
                      document.getElementById('customerPhone').value = customer.phone;
                      document.getElementById('customerAddress').value = customer.address;
                      document.getElementById('customerNotes').value = customer.notes;

                      // Adjust buttons and title for editing
                      document.getElementById('saveCustomerBtn').style.display = 'none';
                      document.getElementById('updateCustomerBtn').style.display = 'inline-block';
                      document.querySelector('#addCustomerModal h2').textContent = 'Edit Customer';
                      document.querySelector('#addCustomerModal .urdu').textContent = 'گاہک میں ترمیم کریں';


                      closeModal('customerDetailsModal'); // Close details modal if open
                      openModal('addCustomerModal');
                  } catch (error) {
                      console.error('Error loading customer for edit:', error);
                      alert('Failed to load customer data for editing.');
                  }
            }


            async function saveOrUpdateCustomer() {
                const customerData = {
                    id: document.getElementById('customerId').value, // Will be empty string if adding
                    name: document.getElementById('customerName').value.trim(),
                    phone: document.getElementById('customerPhone').value.trim(),
                    address: document.getElementById('customerAddress').value.trim(),
                    notes: document.getElementById('customerNotes').value.trim()
                };

                 if (!customerData.name) {
                     alert('Customer name is required.');
                     return;
                 }


                 try {
                      if (customerData.id) { // Update existing
                           await updateCustomer(customerData);
                           alert('Customer updated successfully!');
                      } else { // Add new
                           await addCustomer(customerData);
                           alert('Customer added successfully!');
                      }
                      closeModal('addCustomerModal');
                      loadCustomers(); // Refresh the customer list
                      loadDashboard(); // Refresh dashboard summaries
                   } catch (error) {
                       console.error('Error saving customer:', error);
                       alert('Failed to save customer: ' + error.message);
                   }
            }

            function confirmDeleteCustomer(customerId) {
                openConfirmationModal('Are you sure you want to delete this customer? This action cannot be undone.', async () => {
                    try {
                        await deleteCustomer(customerId);
                        alert('Customer deleted successfully!');
                        closeModal('customerDetailsModal');
                        loadCustomers(); // Refresh list
                        loadDashboard(); // Refresh summaries
                        loadTransactions(); // Transactions might show 'Unknown Customer' now if not reloaded
                    } catch (error) {
                        console.error('Error deleting customer:', error);
                        alert('Failed to delete customer: ' + error.message + '. Ensure the customer has no transactions.');
                    }
                });
            }



            // Transaction Modal Functions
            async function openAddTransactionModal(customerId = null) {
                 closeModal('addTransactionModal'); // Reset form first
                 document.getElementById('saveTransactionBtn').style.display = 'inline-block';
                 document.getElementById('updateTransactionBtn').style.display = 'none';
                 document.querySelector('#addTransactionModal h2').textContent = 'Add New Transaction';
                 document.querySelector('#addTransactionModal .urdu').textContent = 'نیا لین دین شامل کریں';
                 document.getElementById('transactionDate').valueAsDate = new Date(); // Default to today


                 // Populate customer dropdown
                 const select = document.getElementById('transactionCustomer');
                 select.innerHTML = ''; // Clear existing options
                 try {
                      const customers = await getAllCustomers();
                       if (customers.length === 0) {
                           alert('Please add a customer first before adding transactions.');
                           return; // Prevent opening modal if no customers exist
                       }
                       customers.sort((a, b) => a.name.localeCompare(b.name)).forEach(customer => {
                           const option = document.createElement('option');
                           option.value = customer.id;
                           option.textContent = customer.name;
                           select.appendChild(option);
                       });

                       // Pre-select customer if ID is provided (e.g., from customer details view)
                       if (customerId) {
                            select.value = customerId;
                       }


                       openModal('addTransactionModal');
                   } catch (error) {
                       console.error('Error populating customer dropdown:', error);
                       alert('Failed to load customers for transaction.');
                   }
             }

             async function openEditTransactionModal(txnId) {
                 try {
                      const txn = await getTransaction(txnId);
                      if (!txn) {
                           alert('Transaction not found.');
                           return;
                       }

                       // Populate customer dropdown (needed again for edit)
                       const select = document.getElementById('transactionCustomer');
                       select.innerHTML = '';
                       const customers = await getAllCustomers();
                       customers.sort((a, b) => a.name.localeCompare(b.name)).forEach(customer => {
                           const option = document.createElement('option');
                           option.value = customer.id;
                           option.textContent = customer.name;
                           select.appendChild(option);
                       });

                       // Populate form fields
                       document.getElementById('transactionId').value = txn.id;
                       document.getElementById('transactionCustomer').value = txn.customerId;
                       document.getElementById('transactionType').value = txn.type;
                       document.getElementById('transactionAmount').value = txn.amount;
                       document.getElementById('transactionDate').value = txn.date; // Should be YYYY-MM-DD
                       document.getElementById('paymentMethod').value = txn.paymentMethod || 'cash';
                       document.getElementById('transactionNotes').value = txn.notes;


                       // Adjust buttons and title for editing
                       document.getElementById('saveTransactionBtn').style.display = 'none';
                       document.getElementById('updateTransactionBtn').style.display = 'inline-block';
                       document.querySelector('#addTransactionModal h2').textContent = 'Edit Transaction';
                        document.querySelector('#addTransactionModal .urdu').textContent = 'لین دین میں ترمیم کریں';


                       openModal('addTransactionModal');
                   } catch (error) {
                       console.error('Error loading transaction for edit:', error);
                       alert('Failed to load transaction data for editing.');
                   }
             }

             async function saveOrUpdateTransaction() {
                 const txnData = {
                     id: document.getElementById('transactionId').value, // Empty if adding
                     customerId: document.getElementById('transactionCustomer').value,
                     type: document.getElementById('transactionType').value,
                     amount: document.getElementById('transactionAmount').value,
                     date: document.getElementById('transactionDate').value,
                     paymentMethod: document.getElementById('paymentMethod').value,
                     notes: document.getElementById('transactionNotes').value.trim()
                  };

                  // Basic Validation
                  if (!txnData.customerId || !txnData.type || !txnData.amount || !txnData.date) {
                      alert('Please fill in Customer, Type, Amount, and Date.');
                      return;
                  }
                  if (isNaN(parseFloat(txnData.amount)) || parseFloat(txnData.amount) <= 0) {
                       alert('Please enter a valid positive amount.');
                       return;
                   }


                  try {
                       if (txnData.id) { // Update
                            await updateTransaction(txnData);
                            alert('Transaction updated successfully!');
                       } else { // Add
                            await addTransaction(txnData);
                            alert('Transaction added successfully!');
                       }
                       closeModal('addTransactionModal');
                       loadTransactions(); // Refresh transaction list
                       loadDashboard(); // Refresh dashboard summaries
                       // If customer details modal was open, maybe refresh that too
                       const detailsModal = document.getElementById('customerDetailsModal');
                       if (detailsModal.style.display === 'block') {
                            const currentCustomerId = detailsModal.dataset.currentCustomerId;
                            if (currentCustomerId == txnData.customerId) { // Check if it was the same customer
                                 openCustomerDetailsModal(currentCustomerId); // Refresh details
                             }
                        }
                   } catch (error) {
                       console.error('Error saving transaction:', error);
                       alert('Failed to save transaction: ' + error.message);
                   }
             }


            function confirmDeleteTransaction(txnId) {
                 openConfirmationModal('Are you sure you want to delete this transaction? This action cannot be undone.', async () => {
                     try {
                         await deleteTransaction(txnId);
                         alert('Transaction deleted successfully!');
                         loadTransactions(); // Refresh list
                         loadDashboard(); // Refresh summaries
                         // Refresh customer details if open
                         const detailsModal = document.getElementById('customerDetailsModal');
                         if (detailsModal.style.display === 'block') {
                             const currentCustomerId = detailsModal.dataset.currentCustomerId;
                             if (currentCustomerId) {
                                  openCustomerDetailsModal(currentCustomerId); // Refresh details
                              }
                          }
                      } catch (error) {
                          console.error('Error deleting transaction:', error);
                          alert('Failed to delete transaction: ' + error.message);
                      }
                 });
             }


             // Customer Details Modal
            async function openCustomerDetailsModal(customerId) {
                 const contentDiv = document.getElementById('customerDetailsContent');
                 contentDiv.innerHTML = '<div class="loading"></div>';
                 const modal = document.getElementById('customerDetailsModal');
                 modal.dataset.currentCustomerId = customerId; // Store the ID for potential refresh later
                 openModal('customerDetailsModal');

                 try {
                     const customer = await getCustomer(customerId);
                     if (!customer) {
                         contentDiv.innerHTML = '<p>Customer not found.</p>';
                         return;
                     }

                     const transactions = await getCustomerTransactions(customerId);
                     transactions.sort((a, b) => new Date(b.date) - new Date(a.date)); // Show recent first
                     const balance = await calculateCustomerBalance(customerId);

                     let html = `
                          <h2>${customer.name}</h2>
                          <div class="customer-details">
                              <p><strong>Phone:</strong> ${customer.phone || 'N/A'}</p>
                              <p><strong>Address:</strong> ${customer.address || 'N/A'}</p>
                              <p><strong>Notes:</strong> ${customer.notes || 'N/A'}</p>
                              <div class="balance ${balance >= 0 ? (balance > 0 ? 'negative' : 'zero') : 'positive'}">
                                   Current Balance: ${formatCurrency(balance)}
                                   ${balance > 0 ? '<span class="stamp">Due</span>' : (balance < 0 ? '<span class="stamp" style="color: green; border-color: green;">Advance</span>' : '')}
                               </div>
                          </div>
                          <h3 style="margin-top: 1rem;">Transaction History</h3>
                          <div class="table-container" style="max-height: 300px; overflow-y: auto;">
                               <table>
                                   <thead>
                                       <tr><th>Date</th><th>Type</th><th>Amount</th><th>Method</th><th>Notes</th></tr>
                                   </thead>
                                   <tbody>
                     `;

                     if (transactions.length === 0) {
                         html += '<tr><td colspan="5">No transactions found.</td></tr>';
                     } else {
                         transactions.forEach(txn => {
                             html += `
                                 <tr>
                                     <td>${formatDate(txn.date)}</td>
                                     <td>${txn.type === 'udhaar' ? 'Udhaar' : 'Payment'}</td>
                                     <td>${formatCurrency(txn.amount)}</td>
                                      <td>${txn.paymentMethod || '-'}</td>
                                      <td>${txn.notes || '-'}</td>
                                 </tr>
                              `;
                          });
                      }

                      html += `
                                   </tbody>
                               </table>
                          </div>
                          <div class="print-section" style="display: none;">
                              ${await generateCustomerStatement(customerId)}
                           </div>
                      `;


                      contentDiv.innerHTML = html;


                      // Re-attach event listeners for buttons inside the details modal (if needed)
                      document.getElementById('addTxnForCustomerBtn').onclick = () => openAddTransactionModal(customerId);
                      document.getElementById('editCustomerBtn').onclick = () => openEditCustomerModal(customerId);
                      document.getElementById('deleteCustomerBtn').onclick = () => confirmDeleteCustomer(customerId);
                      document.getElementById('printCustomerBtn').onclick = () => printCustomerStatement(customerId);
                      document.getElementById('sendReminderBtn').onclick = () => openReminderModal(customerId);


                  } catch (error) {
                       console.error('Error loading customer details:', error);
                       contentDiv.innerHTML = `<p style="color: red;">Error loading details: ${error.message}</p>`;
                   }
             }


            function printCustomerStatement(customerId) {
                 const detailsModalContent = document.getElementById('customerDetailsModal').querySelector('.modal-content');
                 const printSection = detailsModalContent.querySelector('.print-section');

                 if (!printSection || !printSection.innerHTML.includes('<table>')) {
                     alert('Report content not ready for printing.');
                     return;
                  }


                  const printWindow = window.open('', '_blank');
                  printWindow.document.write(`
                       <html>
                           <head>
                               <title>Customer Statement - ${document.querySelector('#customerDetailsContent h2').textContent}</title>
                               <style>
                                    body { font-family: sans-serif; line-height: 1.4; margin: 20px; }
                                    table { width: 100%; border-collapse: collapse; margin-bottom: 1rem; }
                                    th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
                                    th { background-color: #f2f2f2; }
                                    h2, h3, h4 { margin-top: 1.5rem; margin-bottom: 0.5rem; }
                                    hr { border: 0; border-top: 1px solid #eee; margin: 1rem 0; }
                                    .print-section h3:first-child { margin-top: 0; } /* Adjust spacing for business name */
                                    .balance { font-weight: bold; font-size: 1.1rem; margin-bottom: 1rem; padding: 0.5rem; border-radius: 4px; }
                                    .balance.positive { color: green; background-color: rgba(0, 128, 0, 0.1); }
                                    .balance.negative { color: red; background-color: rgba(255, 0, 0, 0.1); }
                                    .balance.zero { color: #daa520; background-color: rgba(218, 165, 32, 0.1); }
                                </style>
                            </head>
                            <body>${printSection.innerHTML}</body>
                       </html>
                   `);
                   printWindow.document.close();
                   printWindow.focus();
                   setTimeout(() => {
                       printWindow.print();
                       printWindow.close();
                   }, 250);
            }


             // Reminder Modal
             async function openReminderModal(customerId) {
                 try {
                     const customer = await getCustomer(customerId);
                     const balance = await calculateCustomerBalance(customerId);
                     const settings = await getSettings();

                     if (!customer || balance <= 0) {
                         alert('No reminder needed or customer not found.');
                         return;
                     }


                     const templateTextarea = document.getElementById('reminderTemplate');
                     const previewDiv = document.getElementById('reminderPreview');
                     const businessName = settings.businessName || 'Shop';
                     const businessPhone = settings.businessPhone || '';


                     const defaultTemplate = `Salaam ${customer.name},\n\nJust a friendly reminder regarding your outstanding balance of ${formatCurrency(balance)} at ${businessName}.\n\nPlease clear it at your earliest convenience.\n\nThanks,\n${businessName}${businessPhone ? `\n${businessPhone}` : ''}`;

                     templateTextarea.value = defaultTemplate;

                     function updatePreview() {
                          let message = templateTextarea.value;
                          // Replace placeholders (although defaults already have values)
                          message = message.replace('{customer_name}', customer.name);
                          message = message.replace('{balance}', formatCurrency(balance));
                          message = message.replace('{business_name}', businessName);
                          message = message.replace('{business_phone}', businessPhone);
                          previewDiv.innerText = message; // Use innerText to prevent HTML injection
                     }


                     templateTextarea.oninput = updatePreview; // Update preview on typing
                     updatePreview(); // Initial preview


                     // Setup buttons
                     document.getElementById('copyReminderBtn').onclick = () => {
                          navigator.clipboard.writeText(previewDiv.innerText)
                               .then(() => alert('Reminder copied to clipboard!'))
                               .catch(err => alert('Failed to copy: ' + err));
                      };

                     document.getElementById('sendWhatsAppBtn').onclick = () => {
                          const phoneNumber = customer.phone.replace(/[^0-9]/g, ''); // Clean phone number
                          if (!phoneNumber) {
                               alert('Customer phone number is missing or invalid.');
                               return;
                          }
                           // Assume Pakistani numbers might need 92 prefix if not present
                           const whatsappNumber = phoneNumber.startsWith('92') ? phoneNumber : (phoneNumber.startsWith('0') ? '92' + phoneNumber.substring(1) : '92' + phoneNumber);
                           const whatsappUrl = `https://wa.me/${whatsappNumber}?text=${encodeURIComponent(previewDiv.innerText)}`;
                           window.open(whatsappUrl, '_blank');
                       };

                       // Show SMS button functionality if needed (would require integration or manual copy)
                       // document.getElementById('sendSmsBtn').onclick = () => { ... };


                       openModal('reminderModal');
                       modal.dataset.currentCustomerId = customerId; // Store for potential future use


                   } catch (error) {
                       console.error('Error opening reminder modal:', error);
                       alert('Failed to prepare reminder: ' + error.message);
                   }
             }


            // Confirmation Modal
            let confirmCallback = null;
             function openConfirmationModal(message, onConfirm) {
                 document.getElementById('confirmationMessage').textContent = message;
                 confirmCallback = onConfirm;
                 openModal('confirmationModal');
             }

            function handleConfirmYes() {
                 if (typeof confirmCallback === 'function') {
                      confirmCallback();
                  }
                  closeModal('confirmationModal');
                  confirmCallback = null; // Reset callback
             }


            // Language Toggle
            function setupLanguageToggle() {
                const toggle = document.getElementById('languageToggle');
                const langLabel = document.getElementById('langLabel');
                const urduElements = document.querySelectorAll('.urdu');
                const urduTitle = document.getElementById('urduTitle');
                const engTitle = document.querySelector('header h1');

                // Load saved preference
                const savedLang = localStorage.getItem('khataLanguage') || 'en';
                if (savedLang === 'ur') {
                     toggle.checked = true;
                     document.body.classList.add('urdu-mode'); // Add class for potential specific styling
                     urduElements.forEach(el => el.style.display = 'inline'); // Show Urdu labels/titles
                     urduTitle.style.display = 'inline';
                     engTitle.style.display = 'none';
                     langLabel.textContent = 'English';
                 } else {
                     toggle.checked = false;
                     document.body.classList.remove('urdu-mode');
                     urduElements.forEach(el => el.style.display = 'none'); // Hide Urdu
                      urduTitle.style.display = 'none';
                      engTitle.style.display = 'inline';
                      langLabel.textContent = 'Urdu';
                  }


                 toggle.addEventListener('change', () => {
                      if (toggle.checked) { // Switched to Urdu
                           localStorage.setItem('khataLanguage', 'ur');
                           document.body.classList.add('urdu-mode');
                           urduElements.forEach(el => el.style.display = 'inline');
                           urduTitle.style.display = 'inline';
                           engTitle.style.display = 'none';
                           langLabel.textContent = 'English';
                       } else { // Switched to English
                           localStorage.setItem('khataLanguage', 'en');
                           document.body.classList.remove('urdu-mode');
                           urduElements.forEach(el => el.style.display = 'none');
                            urduTitle.style.display = 'none';
                            engTitle.style.display = 'inline';
                            langLabel.textContent = 'Urdu';
                       }
                       // Note: May need to reload data or re-render some elements if text content changes dynamically based on language
                       // For simplicity here, we are just toggling visibility of pre-defined elements.
                   });
             }


            // Initialization function
            async function initializeApp() {
                try {
                    await initDB();
                    console.log("Database ready.");

                    // Set default date for transaction modal
                    document.getElementById('transactionDate').valueAsDate = new Date();

                    // Setup UI elements and event listeners
                    setupTabNavigation();
                     setupLanguageToggle();
                     setupDragAndDrop();

                    // Load initial data for the default tab (Dashboard)
                    loadDashboard();

                    // Modals Close Buttons
                    document.getElementById('closeCustomerModal').addEventListener('click', () => closeModal('addCustomerModal'));
                    document.getElementById('closeTransactionModal').addEventListener('click', () => closeModal('addTransactionModal'));
                    document.getElementById('closeCustomerDetailsModal').addEventListener('click', () => closeModal('customerDetailsModal'));
                    document.getElementById('closeReminderModal').addEventListener('click', () => closeModal('reminderModal'));
                    document.getElementById('confirmNoBtn').addEventListener('click', () => closeModal('confirmationModal'));


                     // Button Event Listeners
                     // Customer Tab
                    document.getElementById('addCustomerBtn').addEventListener('click', openAddCustomerModal);
                    document.getElementById('searchCustomerBtn').addEventListener('click', () => {
                         const query = document.getElementById('customerSearch').value;
                         loadCustomers(1, query); // Load first page of search results
                     });
                     document.getElementById('customerSearch').addEventListener('keypress', (e) => {
                         if (e.key === 'Enter') {
                              const query = document.getElementById('customerSearch').value;
                              loadCustomers(1, query);
                          }
                      });

                      // Transaction Tab
                     document.getElementById('addTransactionBtn').addEventListener('click', () => openAddTransactionModal()); // Open without pre-selected customer
                     document.getElementById('searchTxnBtn').addEventListener('click', () => {
                          const query = document.getElementById('transactionSearch').value;
                          document.getElementById('fromDate').value = ''; // Clear date filters when searching text
                          document.getElementById('toDate').value = '';
                          loadTransactions(1, query);
                      });
                      document.getElementById('transactionSearch').addEventListener('keypress', (e) => {
                          if (e.key === 'Enter') {
                              const query = document.getElementById('transactionSearch').value;
                              document.getElementById('fromDate').value = '';
                              document.getElementById('toDate').value = '';
                              loadTransactions(1, query);
                          }
                      });
                      document.getElementById('filterDateBtn').addEventListener('click', () => {
                           const fromDate = document.getElementById('fromDate').value;
                           const toDate = document.getElementById('toDate').value;
                           document.getElementById('transactionSearch').value = ''; // Clear text search when filtering date
                           loadTransactions(1, '', fromDate, toDate);
                      });


                     // Reports Tab
                     document.getElementById('generateReportBtn').addEventListener('click', generateReport);
                     document.getElementById('printReportBtn').addEventListener('click', printReport);
                     document.getElementById('exportReportBtn').addEventListener('click', exportReportToCSV);


                     // Settings Tab
                     document.getElementById('saveSettingsBtn').addEventListener('click', saveSettingsHandler);
                     document.getElementById('backupDataBtn').addEventListener('click', backupDataHandler);
                     document.getElementById('restoreDataBtn').addEventListener('click', triggerRestore); // Opens file dialog
                     document.getElementById('resetDataBtn').addEventListener('click', confirmResetData);


                     // Modal Save/Update Buttons
                     document.getElementById('saveCustomerBtn').addEventListener('click', saveOrUpdateCustomer);
                     document.getElementById('updateCustomerBtn').addEventListener('click', saveOrUpdateCustomer);
                     document.getElementById('saveTransactionBtn').addEventListener('click', saveOrUpdateTransaction);
                     document.getElementById('updateTransactionBtn').addEventListener('click', saveOrUpdateTransaction);

                     // Confirmation Modal Buttons
                     document.getElementById('confirmYesBtn').addEventListener('click', handleConfirmYes);


                     // Load settings into UI
                     loadSettings();


                     console.log("Application initialized.");
                 } catch (error) {
                     console.error("Initialization failed:", error);
                     alert("Error initializing the application. Please check the console for details.");
                 }
             }


             // Global function to reload all data (useful after restore/reset)
             async function loadAllData() {
                 await loadDashboard();
                 await loadCustomers();
                 await loadTransactions();
                 await loadReports(); // Re-populate dropdowns etc.
                 await loadSettings();
             }


            // Start the application when the DOM is ready
            document.addEventListener('DOMContentLoaded', initializeApp);

        </script>
    </div>
</body>
</html>